////////////////////////////////////////////////////////////////////////////////
// Filename: texture.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
cbuffer TextureBuffer
{
	float	gamma;
	int		count, light_map_id;
	float	padding;
};

Texture2D		textures[3];
SamplerState	sample;

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 MultiTexturePixelShader(PixelInputType input) : SV_TARGET
{
	float4 blend = float4(1,1,1,1);

	[unroll] for ( int i = 0; i < count; i++ )
	{
		blend *= textures[i].Sample(sample, input.tex);
	}

	if ( light_map_id == 0 && count > 1 )
	{
		blend *= gamma;
	}

	blend = saturate(blend);

    return blend;
}
