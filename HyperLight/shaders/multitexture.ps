////////////////////////////////////////////////////////////////////////////////
// Filename: texture.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
cbuffer TextureBuffer
{
	float	gamma;
	int		count, map_idx;
	float	padding;
};

Texture2D		textures[3];
SamplerState	sample;

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
   	float3 normal : NORMAL;
	float3 tangent : TANGENT;
	float3 binormal : BINORMAL;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 MultiTexturePixelShader(PixelInputType input) : SV_TARGET
{
	float4 final = float4(1,1,1,1);

	[unroll] for ( int i = 0; i < count; i++ )
	{
		final *= textures[i].Sample(sample, input.tex);

		if ( i > 0 && i != map_idx )
		{
			final *= gamma;
		}
	}

	final = saturate(final);

    return final;
}
